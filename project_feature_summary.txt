[프로젝트 전체 기능 및 기술 요약]

■ 주요 기능 개요 및 구현 방식
- IoT 워크플로우 설계 및 관리(캔버스 기반)
  → Cytoscape.js 기반의 WorkflowCanvas에서 노드/엣지 시각적 배치, 드래그&드롭, 연결 구현
- 디바이스/센서/프로세스/출력 노드 시각적 배치 및 연결
  → NodePalette에서 노드 유형별로 드래그, WorkflowCanvas에서 위치/연결 관리
- 워크플로우 저장, 불러오기, 수정, 삭제
  → elements 배열을 기반으로 워크플로우 데이터 구조화, 백엔드 API로 저장/수정/삭제
- 디바이스-센서 연결 정보 관리 및 DB 반영
  → deviceSensorLinks 배열로 연결 정보 추출, 백엔드에서 트랜잭션으로 device_sensors 테이블에 반영
- 사용자 인증, 디바이스 관리, 센서 등록, 데이터 분석 등 부가 기능
  → JWT 기반 인증, axios 서비스 레이어, 각종 페이지/컴포넌트로 분리 구현

■ 프론트엔드(React) 상세 구현
- React 기반 SPA, 컴포넌트 구조화(페이지/컴포넌트/서비스 분리)
- Cytoscape.js + react-cytoscapejs: 노드/엣지 시각화, 연결, 위치 이동, 선택 등 인터랙션 구현
- NodePalette: 노드 드래그 시 label/config에 고유값(타임스탬프) 부여, 커스텀 센서 중복 방지
- PropertyEditor: 노드 속성 실시간 편집, 상태 동기화
- 서비스 레이어: axios 인스턴스(api.js)로 API 통신, 환경변수로 baseURL 관리
- 인증/권한: JWT 토큰 localStorage/sessionStorage 관리, 인터셉터로 자동 헤더 추가
- UI/UX: Tailwind, lucide-react 아이콘, 반응형 레이아웃, 모던 스타일 적용

■ 백엔드(Node.js + Express) 상세 구현
- Express 기반 RESTful API 서버, 라우터/컨트롤러 분리
- 워크플로우 생성/수정/삭제: 트랜잭션으로 workflows, device_sensors 등 연관 데이터 일괄 처리
- 센서 등록: 이름+타입+config(고유값) 중복 체크, 신규 센서만 insert, 기존 센서 재사용
- device_sensors: 워크플로우-디바이스-센서 연결 정보 저장, 외래키(CASCADE) 및 수동 삭제 로직 병행
- 에러/예외 처리: try-catch, 상세 콘솔 로그, 500/400/404 등 상태코드 반환

■ 데이터베이스(MySQL) 설계 및 연관관계
- workflows, devices, sensors, device_sensors 등 테이블 설계
- device_sensors: workflow_id, device_id, sensor_id, config(JSON), 외래키(CASCADE), UNIQUE 제약
- 센서 테이블: 센서 종류/템플릿 관리, 중복 방지(이름+타입+config)
- 마이그레이션(js/sql)으로 테이블 자동 생성/삭제 관리

■ 기술 스택/특징
- 프론트: React, Cytoscape.js, axios, JWT, lucide-react, Tailwind 등
- 백엔드: Node.js, Express, MySQL, mysql2, JWT, RESTful API
- DB: MySQL, 외래키/트랜잭션/JSON 컬럼
- 기타: .env 환경변수, CORS, 에러 핸들링, 디버깅 로그 등

■ 트러블슈팅 사례 및 해결 방법
- [센서 중복 문제] 커스텀 센서를 여러 번 추가해도 센서 테이블에 1개만 등록되는 현상
  → NodePalette에서 드래그 시 label/config에 고유값(타임스탬프) 자동 부여, 백엔드 중복 체크 강화
- [device_sensors 연관 삭제] 워크플로우 삭제 시 연결 정보가 남는 문제
  → DB 외래키(CASCADE) 및 백엔드에서 수동 삭제 쿼리 추가로 완전 삭제 보장
- [API 경로 중복] 환경변수에 /api가 포함되어 있는데 서비스 코드에서 /api를 중복 작성해 404 발생
  → 서비스 코드에서 /api 제거, 항상 상대경로(/sensors 등)만 사용하도록 통일
- [SQL 구문 오류] VALUES ? 구문 사용 시 2차원 배열/파라미터 불일치로 500 에러 발생
  → 쿼리 문자열을 동적으로 생성(VALUES (?, ?, ?, ?), ...), flat 배열로 파라미터 전달하도록 수정
- [센서 등록 누락] 워크플로우 수정 시 신규 센서가 등록되지 않는 문제
  → sensorId가 없는 노드만 createSensor 호출, 노드 생성 시 고유값 부여로 신규 센서 인식 보장
- [줄바꿈 경고] LF/CRLF 혼용 경고
  → .gitattributes, VSCode, dos2unix 등으로 LF로 통일, 협업 시 주의

■ 구현 방식 요약
- 노드/엣지 드래그&드롭, 연결, 속성 편집 → elements 배열 관리
- 워크플로우 저장 시 센서 등록(중복 체크), device_sensors 연결 정보 추출 및 저장
- 백엔드에서 트랜잭션으로 워크플로우+연결 정보 일괄 처리
- 워크플로우 삭제 시 연관 device_sensors 자동 삭제
- 커스텀 센서 여러 개 생성 시 고유값으로 구분하여 각각 등록

■ 활용/확장 포인트
- 다양한 IoT 시나리오 설계, 데이터 분석, 자동화 등 확장 가능
- 사용자/디바이스/센서/워크플로우 관리 기능 추가 용이

(이 파일은 발표자료, 문서, 위키 등에 자유롭게 활용 가능합니다.) 