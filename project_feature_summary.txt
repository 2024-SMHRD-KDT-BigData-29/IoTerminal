[프로젝트 전체 기능 및 기술 설명]
버전: v1.2 (2025-05-26)
마지막 업데이트: 기능 설명 상세화, 실제 활용 사례 추가

■ 이 프로젝트는 어떤 걸 할 수 있나요?

1. **IoT 워크플로우 시각적 설계**
- 사용자가 직접 IoT(사물인터넷) 워크플로우를 그림처럼 설계할 수 있습니다.
- 예시 1: "공장의 온도 센서와 습도 센서를 연결하고, 데이터를 분석해서 클라우드에 저장" 같은 과정을 마우스로 쉽게 만들 수 있습니다.
- 예시 2: "스마트팜의 토양 수분 센서와 자동 급수 시스템을 연결하고, 수분이 부족할 때 자동으로 물을 공급"하는 워크플로우를 설계할 수 있습니다.
- 예시 3: "빌딩의 전력 사용량 센서와 조명 시스템을 연결하고, 사용량이 적을 때 자동으로 조명을 조절"하는 워크플로우를 만들 수 있습니다.

2. **다양한 IoT 요소 관리**
- 디바이스(기기) 관리
  * 공장의 생산 설비, 스마트팜의 자동화 시스템, 빌딩의 제어 장치 등 다양한 IoT 기기를 등록하고 관리
  * 각 디바이스의 상태, 위치, 설정 등을 한눈에 확인 가능
  * 디바이스별로 연결된 센서 목록을 실시간으로 확인 가능

- 센서 관리
  * 온도, 습도, 압력, 전력 등 다양한 종류의 센서 등록 및 관리
  * 커스텀 센서 생성 기능으로 특수한 용도의 센서도 추가 가능
  * 센서별 데이터 수집 주기, 임계값, 알림 설정 등 상세 설정 가능

- 데이터 처리 및 저장
  * 센서에서 수집된 데이터를 실시간으로 분석하고 처리
  * 이상치 감지, 평균값 계산, 데이터 필터링 등 다양한 분석 기능
  * 처리된 데이터를 클라우드나 로컬 DB에 저장하고 관리

3. **워크플로우 관리 기능**
- 워크플로우 생성/수정/삭제
  * 새로운 워크플로우 생성: 드래그 앤 드롭으로 쉽게 설계
  * 기존 워크플로우 수정: 노드 추가/삭제, 연결 변경 등 자유롭게 수정
  * 워크플로우 삭제: 관련된 모든 데이터(센서 연결 정보 등)도 함께 삭제

- 워크플로우 템플릿
  * 자주 사용하는 워크플로우를 템플릿으로 저장
  * 새로운 환경에 빠르게 적용 가능
  * 템플릿 수정 및 공유 기능

- 워크플로우 실행/모니터링
  * 설계한 워크플로우를 실제로 실행하고 모니터링
  * 각 노드의 상태, 데이터 흐름, 에러 발생 등을 실시간으로 확인
  * 문제 발생 시 즉시 알림 및 대응 가능

4. **데이터 시각화 및 분석**
- 실시간 데이터 모니터링
  * 센서에서 수집되는 데이터를 실시간으로 그래프로 표시
  * 여러 센서의 데이터를 동시에 비교 분석 가능
  * 임계값 설정 및 알림 기능

- 데이터 분석 도구
  * 수집된 데이터의 통계 분석
  * 이상 패턴 감지
  * 예측 분석 및 리포트 생성

5. **시스템 관리 및 보안**
- 사용자 관리
  * 역할 기반 접근 제어(RBAC)
  * 사용자별 권한 설정
  * 활동 로그 기록 및 감사

- 시스템 설정
  * 데이터 백업 및 복구
  * 시스템 상태 모니터링
  * 알림 설정 및 관리

■ 실제 활용 사례

1. **스마트팜 관리**
- 토양 수분, 온도, 습도 센서를 연결하여 작물 생육 환경 최적화
- 자동 급수, 환기, 난방 시스템과 연동하여 최적의 환경 유지
- 수집된 데이터를 분석하여 작물별 최적 생육 조건 도출

2. **공장 자동화**
- 생산 설비의 상태 모니터링 및 예측 정비
- 에너지 사용량 최적화
- 품질 관리 자동화

3. **스마트 빌딩**
- 전력 사용량 모니터링 및 최적화
- 조명, 냉난방 시스템 자동 제어
- 건물 내 환경(온도, 습도, CO2 등) 최적화

4. **에너지 관리**
- 태양광, 풍력 등 재생에너지 시스템 모니터링
- 전력 사용량 예측 및 최적화
- 에너지 비용 절감을 위한 자동화

■ 프론트엔드(React) - 사용자가 보는 화면은 어떻게 동작하나요?
- 웹 브라우저에서 동작하는 화면은 React라는 기술로 만들었습니다.
- 워크플로우를 그릴 때는 Cytoscape.js라는 그래픽 라이브러리를 사용해서, 노드(동그라미/사각형)와 선(엣지)을 자유롭게 배치할 수 있습니다.
- 왼쪽에는 NodePalette라는 메뉴가 있어서, 센서/디바이스/분석/저장 등 다양한 블록을 마우스로 끌어서 캔버스에 놓을 수 있습니다.
- 각 블록(노드)은 클릭해서 이름, 설정값 등을 바로 수정할 수 있습니다.
- 저장 버튼을 누르면, 현재 그려진 워크플로우가 서버로 전송되어 저장됩니다.
- 디바이스 관리 화면에서는 각 기기별로 연결된 센서 목록도 바로 볼 수 있습니다.

■ 백엔드(Node.js + Express) - 서버에서는 무슨 일이 일어나나요?
- 사용자가 만든 워크플로우, 디바이스, 센서 정보를 안전하게 저장하고 관리합니다.
- 워크플로우를 저장할 때, 센서가 새로 추가되면 센서 정보도 함께 등록합니다.
- 디바이스와 센서가 어떻게 연결되어 있는지(device_sensors 테이블)에 기록합니다.
- 워크플로우를 삭제하면, 그에 연결된 센서-디바이스 정보도 자동으로 삭제됩니다.
- 서버는 Node.js와 Express라는 기술로 만들었고, 데이터베이스는 MySQL을 사용합니다.

■ 데이터베이스(MySQL) - 데이터는 어떻게 저장되나요?
- workflows: 사용자가 만든 워크플로우 전체 정보
- devices: 등록된 IoT 기기 정보
- sensors: 센서 종류(온도, 습도, 커스텀 등) 정보
- device_sensors: 어떤 워크플로우에서 어떤 디바이스에 어떤 센서가 연결됐는지 기록
- 센서 정보는 중복 저장을 막기 위해 이름+타입+설정값이 같으면 한 번만 저장됩니다.
- 워크플로우를 삭제하면, 연결된 device_sensors 정보도 자동으로 삭제됩니다.

■ 실제로 어떤 기술이 쓰였나요?
- 프론트엔드: React(웹 UI), Cytoscape.js(그래픽), axios(API 통신), JWT(로그인), Tailwind(스타일)
- 백엔드: Node.js(서버), Express(라우팅), MySQL(데이터베이스), mysql2(쿼리), JWT(로그인)
- 기타: 환경변수(.env), CORS(보안), 에러 핸들링, 디버깅 로그 등

■ 실제 동작 예시
- 사용자는 "커스텀 센서"를 여러 번 끌어다 놓을 수 있습니다. 각각의 센서는 이름과 설정이 다르게 저장되어, 서버에서도 모두 구분됩니다.
- 디바이스 관리 화면에서 각 기기를 클릭하면, 그 기기에 연결된 센서 목록이 바로 보입니다.
- 워크플로우를 저장하면, 센서 정보와 연결 정보가 모두 데이터베이스에 기록됩니다.
- 워크플로우를 삭제하면, 연결된 센서-디바이스 정보도 함께 삭제되어 데이터가 깔끔하게 관리됩니다.

■ 트러블슈팅(문제 해결 경험)

1. **센서 중복 저장 문제**
- 문제: "커스텀 센서"를 여러 번 추가해도 데이터베이스(sensors 테이블)에 1개만 저장되는 현상 발생.
- 원인: 센서 등록 시 이름(name)과 타입(type)만으로 중복 체크를 하다 보니, 같은 이름/타입의 센서는 모두 같은 것으로 인식되어 insert가 한 번만 됨.
- 해결 과정:
  - 프론트엔드(NodePalette)에서 센서를 드래그할 때마다 label(이름)과 config(설정)에 고유값(타임스탬프 등)을 자동으로 추가하도록 수정.
  - 백엔드에서도 config까지 포함해서 중복 체크를 강화.
  - 이제 "커스텀 센서 1", "커스텀 센서 2"처럼 각각 다른 센서로 인식되어 모두 별도로 저장됨.
- 교훈: 단순히 이름/타입만으로 중복 체크하면 실제 사용자의 의도와 다르게 동작할 수 있으니, 고유값을 활용해 구분해야 함.

2. **워크플로우 삭제 시 연결 정보가 남는 문제**
- 문제: 워크플로우를 삭제해도 device_sensors(디바이스-센서 연결) 테이블에 연결 정보가 남아 데이터가 꼬임.
- 원인: DB 외래키(CASCADE) 설정이 없거나, 백엔드에서 연관 데이터 삭제 쿼리가 누락됨.
- 해결 과정:
  - DB 마이그레이션에서 device_sensors 테이블의 workflow_id에 외래키(CASCADE) 옵션을 추가.
  - 백엔드 컨트롤러에서도 워크플로우 삭제 시 device_sensors를 먼저 삭제하는 쿼리를 추가.
  - 이제 워크플로우를 삭제하면 연결 정보도 자동으로 삭제되어 데이터 정합성 유지.
- 교훈: 연관 데이터는 DB 레벨과 코드 레벨에서 모두 신경 써야 안전하다.

3. **API 경로 중복 및 404 에러**
- 문제: 프론트엔드에서 API 요청 시 환경변수에 이미 /api가 포함되어 있는데, 서비스 코드에서 또 /api를 붙여서 404 에러 발생.
- 원인: 환경변수와 코드에서 API 경로가 중복되어 실제로는 /api/api/sensors 같은 잘못된 경로로 요청됨.
- 해결 과정:
  - 서비스 코드에서 /api를 제거하고, 항상 /sensors, /devices 등 상대경로만 사용하도록 통일.
  - 환경변수와 코드의 역할을 명확히 분리.
- 교훈: API 경로는 환경변수와 코드에서 중복되지 않게 일관성 있게 관리해야 한다.

4. **SQL 구문 오류(VALUES ? 사용 시)**
- 문제: 여러 행을 한 번에 insert할 때 VALUES ? 구문을 사용했으나, MySQL 드라이버에서 2차원 배열/파라미터 불일치로 500 에러 발생.
- 원인: VALUES ?는 2차원 배열만 받을 수 있고, 파라미터 개수와 쿼리문이 맞지 않으면 에러가 남.
- 해결 과정:
  - 쿼리문을 동적으로 생성해서 VALUES (?, ?, ?, ?), (?, ?, ?, ?)처럼 여러 행을 안전하게 저장하도록 수정.
  - 파라미터도 flat 배열로 만들어 전달.
- 교훈: SQL 쿼리문과 파라미터 개수는 항상 일치해야 하며, 여러 행 insert는 동적 쿼리로 처리하는 것이 안전하다.

5. **워크플로우 수정 시 신규 센서 등록 누락**
- 문제: 워크플로우를 수정할 때 새로 추가한 센서가 sensors 테이블에 등록되지 않는 현상.
- 원인: 이미 sensorId가 있는 노드는 등록을 건너뛰도록 되어 있어, 신규 센서임에도 불구하고 sensorId가 잘못 할당되는 경우가 있었음.
- 해결 과정:
  - 노드 생성 시 sensorId가 없는 경우에만 createSensor API를 호출하도록 로직을 보강.
  - NodePalette에서 드래그 시 고유값을 부여해 신규 센서임을 확실히 구분.
- 교훈: 신규 데이터 등록 조건을 명확히 하고, 프론트-백엔드 데이터 흐름을 꼼꼼히 체크해야 한다.

6. **윈도우/리눅스 줄바꿈(LF/CRLF) 혼용 경고**
- 문제: 윈도우와 리눅스에서 줄바꿈 방식이 달라서 Git에서 경고가 발생.
- 원인: 한 파일에서 LF와 CRLF가 섞여 있으면 협업 시 충돌이나 불필요한 변경이 생김.
- 해결 과정:
  - .gitattributes 파일을 추가해 LF로 통일.
  - VSCode, dos2unix 등 에디터/툴에서 줄바꿈을 맞춤.
- 교훈: 협업 프로젝트에서는 줄바꿈, 인코딩 등 환경 차이도 미리 통일해두는 것이 좋다.

7. **DB 컬럼 누락으로 인한 SQL 오류**
- 문제: 워크플로우 생성 시 device_sensors 테이블에 workflow_id 컬럼이 없어서 Unknown column 'workflow_id' in 'where clause' 에러 발생.
- 원인: 마이그레이션이 누락되었거나, DB 구조와 코드가 불일치.
- 해결 과정:
  - DB에서 직접 컬럼을 추가하거나, 마이그레이션 파일을 보강해 컬럼/외래키를 추가.
  - 적용 후 정상적으로 워크플로우 생성/저장이 가능해짐.
- 교훈: DB 구조와 코드(마이그레이션)는 항상 일치시켜야 하며, 변경 시에는 반드시 적용 여부를 확인해야 한다.

■ 이 시스템의 발전 방향

1. **기술적 확장성**
- 실시간 데이터 스트리밍, 대시보드, 알림 시스템 등 다양한 IoT 서비스와 연동 가능
- 센서/디바이스 종류 추가, 노드 타입 확장, 외부 API 연동 등 손쉽게 기능 확장 가능
- 대규모 데이터 처리, 빅데이터 분석, AI 기반 자동화 등으로 발전 가능

2. **비즈니스/서비스 측면**
- 공장, 스마트팜, 빌딩, 에너지 관리 등 다양한 산업 현장에 맞춤형 솔루션 제공 가능
- 사용자별 맞춤 워크플로우, 권한 관리, 멀티 유저 협업 기능 추가
- SaaS(서비스형 소프트웨어)로 발전시켜 다양한 고객에게 제공 가능

3. **사용자 경험(UX) 개선**
- 더 직관적인 UI, 모바일/태블릿 대응, 실시간 피드백, 시각화 강화
- 워크플로우 템플릿, 추천 기능, 자동완성 등 편의성 기능 추가

4. **보안 및 안정성 강화**
- 사용자 인증/권한 강화, 데이터 암호화, 감사 로그 등 보안 기능 추가
- 장애 복구, 백업, 모니터링 등 운영 안정성 확보

5. **오픈 플랫폼/생태계 구축**
- 외부 개발자/기업이 플러그인, 노드, 데이터 소스 등을 자유롭게 추가할 수 있는 오픈 플랫폼으로 발전
- 커뮤니티, 마켓플레이스 등 생태계 조성

(이 파일은 발표자료, 문서, 위키 등에 자유롭게 활용 가능합니다.)
